Friday, 3rd February:
DONE * Finish the implementation of execute'
DONE * Define an instance for the RiscvProgram typeclass
DONE * Split the code between several files, requirements :
  - One non scary file
  - automatically generated code within one file not pushed on the repo.
  - Create Makefile for the generation
 X - typeclasses and instances in different file(s).
  - miscellaneous plumbing functions in different file.
DONE * Look for more polymorphism in the instruction type. (Some reading required)

Friday, 17 february:
* Change memory : addresses in the processor are in bytes. Now there are in words.
* elf library in haskell or elf2hex + custom parsing Tcl/Tk.
* Add State monad to avoid dependency with mtl
* MonadPlus would allow us to define execute functions specific to each
  extensions (in different files) with execute _ = mzero. Then our step function
  would cascade those different functions (with mplus).
* For the different modules of RISCV, reuse the naming convention of riscv.


Monday, 27 february:
* Decode stage : Change Int to Integer wherever it is needed.
* avoid the use of functions for infix operators.
* elf library in haskell or elf2hex + custom parsing Tcl/Tk.
* For the different modules of RISCV, reuse the naming convention of riscv.
* testing with riscv toolchain.

Monday, 20th March:
* Build regression test harness (integration with spike?)
* Implement CSRs for machine mode (exceptions, interrupts)
* Supervisor mode
